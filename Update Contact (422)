pm.test("Response time is within acceptable range", function () {
  pm.expect(pm.response.responseTime).to.be.below(200);
});


pm.test("Response status code is 200", function () {
  pm.response.to.have.status(200);
});


pm.test("Response status code is 200", function () {
  pm.response.to.have.status(200);
});
pm.test("Content-Type header is application/json", function () {
    pm.expect(pm.response.headers.get("Content-Type")).to.include("application/json");
});
pm.test("Response has the required fields for contact object", function () {
    const responseData = pm.response.json();
    
    pm.expect(responseData).to.be.an('object');
    pm.expect(responseData).to.have.property('contact');
    
    const contact = responseData.contact;
    pm.expect(contact).to.be.an('object');
    pm.expect(contact).to.have.property('id');
    pm.expect(contact).to.have.property('tags');
    pm.expect(contact).to.have.property('dateAdded');
    pm.expect(contact).to.have.property('dateUpdated');
    pm.expect(contact).to.have.property('type');
    pm.expect(contact).to.have.property('locationId');
    pm.expect(contact).to.have.property('firstName');
    pm.expect(contact).to.have.property('firstNameLowerCase');
    pm.expect(contact).to.have.property('fullNameLowerCase');
    pm.expect(contact).to.have.property('lastName');
    pm.expect(contact).to.have.property('lastNameLowerCase');
    pm.expect(contact).to.have.property('email');
    pm.expect(contact).to.have.property('emailLowerCase');
    pm.expect(contact).to.have.property('phone');
    pm.expect(contact).to.have.property('country');
    pm.expect(contact).to.have.property('createdBy');
    pm.expect(contact.createdBy).to.be.an('object');
    pm.expect(contact.createdBy).to.have.property('source');
    pm.expect(contact.createdBy).to.have.property('channel');
    pm.expect(contact.createdBy).to.have.property('sourceId');
    pm.expect(contact.createdBy).to.have.property('timestamp');
    pm.expect(contact).to.have.property('customFields');
    pm.expect(contact).to.have.property('additionalEmails');
    pm.expect(contact).to.have.property('additionalPhones');
});


pm.test("Response status code is 200", function () {
    pm.response.to.have.status(200);
});
pm.test("Content-Type header is application/json", function () {
    pm.expect(pm.response.headers.get("Content-Type")).to.include("application/json");
});
pm.test("Response has the required fields", function () {
    const responseData = pm.response.json();
    pm.expect(responseData).to.be.an('object');
    pm.expect(responseData.contact).to.have.property('id').that.is.a('string').and.to.have.lengthOf.at.least(1, "ID should be a non-empty string");
});


pm.test("Response status code is 200", function () {
  pm.response.to.have.status(200);
});

pm.test("Content-Type header is application/json", function () {
    pm.expect(pm.response.headers.get("Content-Type")).to.include("application/json");
});

pm.test("Response has the required fields", function () {
    const responseData = pm.response.json();
    pm.expect(responseData).to.be.an('object');
    pm.expect(responseData).to.have.property('contact');
    const contact = responseData.contact;
    pm.expect(contact).to.have.property('tags').that.is.an('array');
});
